swagger: '2.0'
info:
  title: Sunglasses.io API
  description: API for Sunglasses.io store
  version: 1.0.0
host: localhost:3001
schemes:
  - http
basePath: /api
produces:
  - application/json
paths:
  /products:
    get:
      tags:
        - Products
      summary: Products
      description: |
        Products endpoint allows you to search based on different filters such as brand and price in addition to search string
      parameters:
        - name: query
          in: query
          description: Search query string
          required: false
          type: string
      responses:
        '200':
          description: An array of products
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands:
    get:
      tags:
        - Brands
      summary: Brands
      description: |
        Brands contain the grouping for all products(Each product fall under a single brand).
      responses:
        '200':
          description: An array of brands
          schema:
            type: array
            items:
              $ref: '#/definitions/Brand'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /brands/{id}/products:
    get:
      tags:
        - Brands
      summary: Products by Brand
      description: |
        All products associated with given brand
      parameters:
        - name: id
          in: path
          description: Id of brand to find products in.
          required: true
          type: string
      responses:
        '200':
          description: Array of products in brand
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '404':
          description: Brand not found
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /login:
    post:
      tags:
      - Login
      summary: User Login
      description : |
        Logs user into application
      parameters:
        - name: Username
          in: header
          required: true
          description: Username login input
          type: string
        - name: Password
          in: header
          required: true
          description: Password login input
          type: string
      responses:
        '200':
          description: successful login
        '400':
          description: Invalid username/password given
  /me/cart:
    get:
      tags:
        - Me
      summary: Shopping Cart
      description: |
        Shopping cart for currently logged in user.
      security:
        - basicAuth: []
      responses:
        '200':
          description: An array of products in current user's cart
          schema:
            type: array
            items:
              $ref: '#/definitions/Product'
        '401':
          $ref: '#/definitions/UnauthorizedError'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Me
      summary: Add to Cart
      description: |
        Adds product to Shopping Cart
      security:
        - basicAuth: []
      responses:
        '200':
          description: Product Added to Cart
        '401':
          $ref: '#/definitions/UnauthorizedError'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /me/cart/{productId}:
    delete:
      tags:
        - Me
      summary: Remove from Cart
      description: |
        Remove selected item from Cart
      security:
        - basicAuth: []
      parameters:
        - name: productId
          in: path
          description: Product id to remove from cart
          required: true
          type: string
      responses:
        '200':
          description: Item removed
        '401':
          $ref: '#/definitions/UnauthorizedError'
        '404':
          description: Product ID not found in cart
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
    post:
      tags:
        - Me
      summary: Change quantity
      description: |
       Change quantity of product in cart
      security:
        - basicAuth: []
      parameters:
        - name: productId
          in: path
          description: Product id specified for quantity update
          required: true
          type: string
        - name: quantity
          in: header
          description: Set quantity of product in cart(50 max)
          required: true
          type: integer
          minimum: 1
          maximum: 50
      responses:
        '200':
          description: Quantity updated
        '401':
          $ref: '#/definitions/UnauthorizedError'
        '404':
          description: Product ID not found in cart
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
securityDefinitions:
  basicAuth:
    type: basic
definitions:
  Product:
    type: object
    properties:
      id:
        type: string
        description: Unique product ID.
      brandId:
        type: string
        description: Brand ID this product belongs to.
      name:
        type: string
        description: Name of the product.
      description:
        type: string
        description: Description of product
      price:
        type: integer
        description: Price of product.
      imageUrls:
        type: array
        items:
          type: string
        description: Product image URLs
  Brand:
    type: object
    properties:
      id:
        type: string
        description: >-
          The unique identifier given to the brand
      name:
        type: string
        description: Brand
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
  UnauthorizedError:
    description: Auth error. Must be logged in as a valid user.
